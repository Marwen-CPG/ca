@model Comptabilite_Analytique.Models.EcritureMultiligneViewModel

@{
    ViewBag.Title = "Ajouter Ecriture";
}

<h2>Saisie d'Ecriture Analytique</h2>
@if (ViewBag.Message != null)
{     <div class="alert alert-danger alert-dismissable fade in col-sm-12 col-lg-12 col-md-12" role="alert">
        <button type="button" id="cbtn" class="close" data-dismiss="alert" aria-hidden="true">
            &times;
        </button>
        @ViewBag.Message
    </div><br />}
@using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "myform" }))
{
    @Html.AntiForgeryToken()
    
    for (var i = 0; i < 3; i++)
    {
        <div class="form-group col-lg-4 ">
            @Html.LabelFor(model => model.Ecritures[i].ORIGINE, htmlAttributes: new { @class = "control-label " })
            <div>
                @Html.EditorFor(model => model.Ecritures[i].ORIGINE , new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ecritures[i].ORIGINE, "", new { @class = "text-danger" })
            </div>
        </div>

    }  @*<div class="col-sm-12 col-lg-12 col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h4>Entête</h4>
            </div>
            <div class="panel-body">
                <div class="form-inline">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                    <div class="row">
                        <div class="form-group col-lg-4 ">
                            @Html.LabelFor(model => model.ORIGINE[0], htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.ORIGINE[0], new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ORIGINE[0], "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group  col-lg-4">
                            @Html.LabelFor(model => model.GROUPE[0], htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.GROUPE[0], new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.GROUPE[0], "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-4 ">
                            @Html.LabelFor(model => model.DATE_ECRITURE[0], htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.DATE_ECRITURE[0], new { htmlAttributes = new { @class = "form-control jqueryui-marker-datepicker" } })
                                @Html.ValidationMessageFor(model => model.DATE_ECRITURE[0], "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>*@

    @*<div class="col-sm-12 col-lg-12 col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h4>Débit</h4>
            </div>
            <div class="panel-body">
                <div class="form-inline">
                    <div class="row">
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.ND_NUMERO, htmlAttributes: new { @class = "control-label   " })
                            <div>
                                @Html.EditorFor(model => model.ND_NUMERO, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ND_NUMERO, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.SIEGE_N_SIEGED, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.SIEGE_N_SIEGED, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SIEGE_N_SIEGED, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.COMPTE_ANA5_NUMEROD, htmlAttributes: new { @class = "control-label  " })
                            <div>
                                @Html.EditorFor(model => model.COMPTE_ANA5_NUMEROD, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.COMPTE_ANA5_NUMEROD, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>

                    <div class="row">
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.MONTANT, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.MONTANT, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MONTANT, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.CODE_BUDGETD, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.CODE_BUDGETD, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CODE_BUDGETD, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.COMPTE_GENERALE, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.COMPTE_GENERALE, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.COMPTE_GENERALE, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.LIBELLE_FR, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.LIBELLE_FR, new { htmlAttributes = new { @class = " form-control", style = "width:400px" } })
                                @Html.ValidationMessageFor(model => model.LIBELLE_FR, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-lg-6">
                            @Html.LabelFor(model => model.LIBELLE_AR, htmlAttributes: new { @class = "control-label " })
                            <div>
                                @Html.EditorFor(model => model.LIBELLE_AR, new { htmlAttributes = new { @class = "form-control ", style = "width:400px" } })
                                @Html.ValidationMessageFor(model => model.LIBELLE_AR, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-12 col-lg-12 col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h4>Crédit</h4>
            </div>
            <div class="panel-body">
                <div class="form-inline">
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(model => model.SIEGE_N_SIEGEC, htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EditorFor(model => model.SIEGE_N_SIEGEC, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SIEGE_N_SIEGEC, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-lg-4">
                        @Html.LabelFor(model => model.COMPTE_ANA5_NUMEROC, htmlAttributes: new { @class = "control-label  " })
                        <div>
                            @Html.EditorFor(model => model.COMPTE_ANA5_NUMEROC, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.COMPTE_ANA5_NUMEROC, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(model => model.CODE_BUDGETC, htmlAttributes: new { @class = "control-label " })
                        <div>
                            @Html.EditorFor(model => model.CODE_BUDGETC, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CODE_BUDGETC, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>*@




<div class="container">
    <div class="row clearfix">
        <div class="col-md-11 table-responsive">
            <table class="table table-bordered table-hover table-sortable" id="tab_logic">
                <thead>
                    <tr>
                        <th class="text-center">
                            Montant
                        </th>
                        <th class="text-center">
                            Siege
                        </th>
                        <th class="text-center">
                            Compte
                        </th>
                        <th class="text-center">
                            Nature Dépense
                        </th>
                        <th class="text-center">
                            Code Budget
                        </th>
                        <th class="text-center">
                            Libelle
                        </th>
                        <th class="text-center" style="border-top: 1px solid #ffffff; border-right: 1px solid #ffffff;">
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr id='addr0' data-id="0" class="hidden">
                        <td data-name="montant">
                            <input type="text" name='montant0' placeholder='Montant' class="form-control" />
                        </td>
                        <td data-name="siege">
                            <input type="text" name='siege0' placeholder='Siege' class="form-control" />
                        </td>
                        <td data-name="compte">
                            <input type="text" name='compte0' placeholder='Compte' class="form-control" />        
                        </td>
                        <td data-name="naturedepense">
                            <input type="text" name='naturedepense0' placeholder='Nature dépense' class="form-control" />
                        </td>
                        <td data-name="codebudget">
                            <input type="text" name="codebudget0" placeholder="CodeBudget" class="form-control" />
                        </td>
                        <td data-name="libelle">
                            <input type="text" name="libelle0" placeholder="Libelle" class="form-control" />
                        </td>
                        <td data-name="del">
                            <button nam"del0" class='btn btn-danger glyphicon glyphicon-remove row-remove'></button>
                        </td>

                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <a id="add_row" class="btn btn-default pull-left">Ajouter <span class="glyphicon glyphicon-plus"></span></a>
</div>
    <hr />
    <div>
        <div class=" col-md-12">
            <input type="submit" value="Ajouter" class="btn btn-success btn-block" /> <br />
        </div>
    </div>
}

<div>
    <br />
    @*@Html.ActionLink("Back to List", "Index")*@
    <a class="btn-primary btn-outline btn" href="@Url.Action("Index", "Ecriture")"> <span class=" glyphicon glyphicon-arrow-left"></span> Retourner vers la liste</a>
</div>
@section scripts{
    <script type="text/javascript">
    //------  prev form

    (function ($) {

        $.fn.previewForm = function (options) {
            var form_settings = $.extend({
                identifier: 'label',
                show_password: true,
                extratext: 'Souhaitez-vous enregistrer',
                yes: 'Oui',
                no: 'Non',
                title: 'Veuillez prévisualiser les données saisies'
            }, options);

            var dia_log;
            var renderBUTTON;
            var this_frm;
            this_frm = $(this);

            $(this).submit(function () {

                if ($('#pfomdata').length) {
                    return true;
                }


                dia_log = "";
                var needle_cnfrm;

                if (this.id.length > 0) { needle_cnfrm = '#' + this.id + ' label'; }
                else { needle_cnfrm = '.' + $(this).attr('class') + ' label'; }

                $(needle_cnfrm).each(function (i, val) {
                    if ($(this).text().length > 2) {

                        what_t = $('#' + $(this).attr('for'));

                        switch (what_t.prop('type')) {
                            case 'password':
                                if (!form_settings.show_password)
                                    dia_log += $(this).text() + " Votre mot de passe   <br />";
                                else
                                    dia_log += $(this).text() + what_t.val() + " <br />";
                                break;
                            case 'select-one':
                                dia_log += $(this).text() +' : '+ $('#' + $(this).attr('for') + ' ' + ' option:selected').text() + " <br />";
                                break;
                            case 'radio':
                                if (what_t.is(':checked'))
                                    dia_log += $(this).text() + ' :  ' + what_t.val() + " <br />";
                                break;
                            case 'checkbox':
                                if (what_t.is(':checked'))
                                    dia_log += $(this).text() + ' : ' + what_t.val() + " <br />";
                                break;
                            case 'undefined':
                                break;
                            default:
                                dia_log += $(this).text() + '  :  '+ what_t.val() + " <br />";
                                break;

                        }
                    }
                });
                dia_log = dia_log.replace('undefined', '');


                renderBUTTON = "";
                renderBUTTON += '<a href="javascript:void(0);" class="button form_yes">' + form_settings.yes + '<span></span></a>';
                renderBUTTON += '<a href="javascript:void(0);" class="button form_no">' + form_settings.no + '<span></span></a>';

                var renderTemplate = [
                    '<div id="previewOverlay">',
    '<div id="previewBox">',
        '<h1>', form_settings.title, '</h1>',
        '<p>', dia_log, '</p>',
        '<p>', form_settings.extratext, '</p>',
        '<div id="previewButtons">',
                renderBUTTON,
                '</div></div></div>'
            ].join('');

                $(renderTemplate).hide().appendTo('body').fadeIn();

                $(".form_yes").click(function () {
                    var input = $("<input>").attr("type", "hidden").attr("id", "pfomdata").val("true");
                    this_frm.append($(input));
                    this_frm.submit();
                });

                $(".form_no").click(function () {
                    $('#previewOverlay').fadeOut(function () {
                        $(this).remove();
                    });
                });

                return false;

            });
        }

    })(jQuery);



    $(document).ready(function () {
        $('#myform').previewForm({ show_password: false });
    });
 //Dynamic form stuff----
    $(document).ready(function () {
        $("#add_row").on("click", function () {
            // Dynamic Rows Code

            // Get max row id and set new id
            var newid = 0;
            $.each($("#tab_logic tr"), function () {
                if (parseInt($(this).data("id")) > newid) {
                    newid = parseInt($(this).data("id"));
                }
            });
            newid++;

            var tr = $("<tr></tr>", {
                id: "addr" + newid,
                "data-id": newid
            });

            // loop through each td and create new elements with name of newid
            $.each($("#tab_logic tbody tr:nth(0) td"), function () {
                var cur_td = $(this);

                var children = cur_td.children();

                // add new td and element if it has a nane
                if ($(this).data("name") != undefined) {
                    var td = $("<td></td>", {
                        "data-name": $(cur_td).data("name")
                    });

                    var c = $(cur_td).find($(children[0]).prop('tagName')).clone().val("");
                    c.attr("name", $(cur_td).data("name") + newid);
                    c.appendTo($(td));
                    td.appendTo($(tr));
                } else {
                    var td = $("<td></td>", {
                        'text': $('#tab_logic tr').length
                    }).appendTo($(tr));
                }
            });

            // add delete button and td
            /*
            $("<td></td>").append(
                $("<button class='btn btn-danger glyphicon glyphicon-remove row-remove'></button>")
                    .click(function() {
                        $(this).closest("tr").remove();
                    })
            ).appendTo($(tr));
            */

            // add the new row
            $(tr).appendTo($('#tab_logic'));

            $(tr).find("td button.row-remove").on("click", function () {
                $(this).closest("tr").remove();
            });
        });




        // Sortable Code
        var fixHelperModified = function (e, tr) {
            var $originals = tr.children();
            var $helper = tr.clone();

            $helper.children().each(function (index) {
                $(this).width($originals.eq(index).width())
            });

            return $helper;
        };

        $(".table-sortable tbody").sortable({
            helper: fixHelperModified
        }).disableSelection();

        $(".table-sortable thead").disableSelection();



        $("#add_row").trigger("click");
    });
    
       </script>

    <style>
        .ui-datepicker-calendar {
            display: none;
        }
        /*prev form css*/
        #previewOverlay {
            width: 100%;
            height: 100%;
            position: fixed;
            top: 0;
            left: 0;
            background: -moz-linear-gradient(rgba(11,11,11,0.1), rgba(11,11,11,0.6)) repeat-x rgba(11,11,11,0.2);
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgba(11,11,11,0.1)), to(rgba(11,11,11,0.6))) repeat-x rgba(11,11,11,0.2);
            z-index: 100000;
        }

        #previewBox {
            background: url('body_bg.jpg') repeat-x left bottom #e5e5e5;
            width: 460px;
            position: fixed;
            left: 50%;
            top: 20%;
            margin: -130px 0 0 -230px;
            border: 1px solid rgba(33, 33, 33, 0.6);
            -moz-box-shadow: 0 0 2px rgba(255, 255, 255, 0.6) inset;
            -webkit-box-shadow: 0 0 2px rgba(255, 255, 255, 0.6) inset;
            box-shadow: 0 0 2px rgba(255, 255, 255, 0.6) inset;
        }

            #previewBox h1,
            #previewBox p {
                font: 26px/1 'Cuprum','Lucida Sans Unicode', 'Lucida Grande', sans-serif;
                background: url('header_bg.jpg') repeat-x left bottom #f5f5f5;
                padding: 18px 25px;
                text-shadow: 1px 1px 0 rgba(255, 255, 255, 0.6);
                color: #666;
            }

            #previewBox h1 {
                letter-spacing: 0.3px;
                color: #888;
            }

            #previewBox p {
                background: none;
                font-size: 16px;
                line-height: 1.4;
                padding-top: 7px;
            }

        #previewButtons {
            padding: 15px 0 25px;
            text-align: center;
        }

        #previewBox .button {
            display: inline-block;
            background: #610B21 no-repeat;
            color: white;
            position: relative;
            height: 33px;
            font: 17px/33px 'Cuprum','Lucida Sans Unicode', 'Lucida Grande', sans-serif;
            margin-right: 15px;
            padding: 0 35px 0 40px;
            text-decoration: none;
            border: none;
        }

            #previewBox .button:last-child {
                margin-right: 0;
            }

            #previewBox .button span {
                position: absolute;
                top: 0;
                right: -5px;
                background: url('buttons.png') no-repeat;
                width: 5px;
                height: 33px;
            }

        #previewBox .form_yes {
            background-position: left top;
            text-shadow: 1px 1px 0 #5889a2;
        }

            #previewBox .form_yes span {
                background-position: -195px 0;
            }

            #previewBox .form_yes:hover {
                background-position: left bottom;
            }

                #previewBox .form_yes:hover span {
                    background-position: -195px bottom;
                }

        #previewBox .form_no {
            background-position: -200px top;
            text-shadow: 1px 1px 0 #707070;
        }

            #previewBox .form_no span {
                background-position: -395px 0;
            }

            #previewBox .form_no:hover {
                background-position: -200px bottom;
            }

                #previewBox .form_no:hover span {
                    background-position: -395px bottom;
                }


.table-sortable tbody tr {
    cursor: move;
}
    </style> }
